# ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ GuardDuty S3 Malware Protection Blog Post Solution - CloudFormation Template                                                                             ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for creating the IAM PassRole and Policy
  for GuardDuty Malware Protection for S3
Metadata:
  Version: v.1.0.2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Scenario
        Parameters:
          - NewExistingS3Bucket
          - CreateBucketKMSKey
          - CopyToCleanBucket
      - Label:
          default: Post Scan File Copy Function
        Parameters:
          - CopyMethod
      - Label:
          default: If BYO Buckets
        Parameters:
          - ExistingSourceBucketName
          - ExistingDestinationBucketName
          - BucketKMSKey
          - ExistingKMSKeyArn

    ParameterLabels:
      NewExistingS3Bucket:
        default: Create a new bucket or use an existing bucket?
      BucketKMSKey:
        default: Is the existing bucket using a KMS key?
      CreateBucketKMSKey:
        default: If "NEW", Should a KMS key be created for the new bucket?
      CopyToCleanBucket:
        default: Would you like to create the copy function to a destination bucket?
      CopyMethod:
        default: This will be used as the basis for the copy function and EventBridge rule to invoke the function
      ExistingSourceBucketName:
        default: Enter the bucket name that you would like to be your scanned bucket
      ExistingDestinationBucketName:
        default: Enter the bucket name that you would like to copy objects into after scanning
      ExistingKMSKeyArn:
        default: ARN of the existing KMS key to be used

# ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ CloudFormation Template Parameters                                                                                                          ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
Parameters:
  NewExistingS3Bucket:
    Description: Select "new" to create or use an "existing" S3 bucket(s) in this scenario.
    Default: new
    Type: String
    AllowedValues:
      - new
      - existing
    ConstraintDescription: You must specify new or existing

  CopyToCleanBucket:
    Description: Select "True" if a destination S3 bucket and copy function is to be used.
    Default: false
    Type: String
    AllowedValues:
      - true
      - false
    ConstraintDescription: You must specify true or false.

  CopyMethod:
    Description: Copy files with scanned value of "THREATS" or "NO_THREATS_FOUND"
    Default: NO_THREATS_FOUND
    Type: String
    AllowedValues:
      - THREATS
      - NO_THREATS_FOUND

  BucketKMSKey:
    Description: Select "true" if a KMS Key is in use on the bucket.
    Default: false
    Type: String
    AllowedValues:
      - true
      - false
    ConstraintDescription: You must specify true or false.

  CreateBucketKMSKey:
    Description: Should a KMS key be created for the new S3 bucket?
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
    ConstraintDescription: You must specify true or false.

  ExistingSourceBucketName:
    Description: Provide an existing S3 Bucket Name
    Type: String
    AllowedPattern: ^(?:(?!arn:)[a-z0-9][a-z0-9.-]{0,61}[a-z0-9])?$
    Default: ""

  ExistingDestinationBucketName:
    Description: Provide a existing S3 Bucket Name
    Type: String
    AllowedPattern: ^(?:(?!arn:)[a-z0-9][a-z0-9.-]{0,61}[a-z0-9])?$
    Default: ""

  ExistingKMSKeyArn:
    Description: Provide a KMS key ARN
    Type: String
    AllowedPattern: "^(arn:aws:kms:[a-z0-9-]+:[0-9]+:key/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$"
    Default: ""

# ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ CloudFormation Template Conditions                                                                                                          ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

Conditions:
  CreateNewKMSKey: !Equals
    - !Ref CreateBucketKMSKey
    - true

  UseExistingKMSKey: !Equals
    - !Ref CreateBucketKMSKey
    - false

  CreateNewBucket: !Equals
    - !Ref NewExistingS3Bucket
    - new

  UseExistingBucket: !Equals
    - !Ref NewExistingS3Bucket
    - existing

  KMSKey: !Equals
    - !Ref BucketKMSKey
    - true

  NoKMSKey: !Equals
    - !Ref BucketKMSKey
    - false

  CreateCopyFunction: !Equals
    - !Ref CopyToCleanBucket
    - true

  ScenarioEncryption: !Or
    - !Condition KMSKey
    - !Condition CreateNewKMSKey

  ScenarioNewBucketCopyFunction: !And
    - !Condition CreateCopyFunction
    - !Condition CreateNewBucket

  ScenarioExistingBucketNoKMS: !And
    - !Condition CreateNewBucket
    - !Condition NoKMSKey

  ScenarioNewBucketNoKMS: !And
    - !Condition CreateNewBucket
    - !Condition UseExistingKMSKey

# ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ GuardDuty S3 Malware Scanning - CloudFormation Template Resources                                                                                     ║
# ╠═══════════════════════════════════════════╤════════════════════════════════════════╤══════════════════════════════════════════════════════════════════╣
# ║ S3MalwareProtectedBucket                  │ AWS::S3::Bucket                        │ New S3 bucket for malware scanning                               ║
# ║ IAMS3MalwareBucketPolicy                  │ AWS::IAM::ManagedPolicy                │ IAM managed policy for S3 malware scanning                       ║
# ║ IAMS3MalwareBucketRole                    │ AWS::IAM::Role                         │ IAM role using the managed policy for S3 malware scanning        ║
# ║ GuardDutyS3MalwareProtectionPlan          │ AWS::GuardDuty::MalwareProtectionPlan  │ GuardDuty S3 malware protection resource for the S3 bucket       ║
# ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝
Resources:
  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the Encryption Resources                                                                                                                       ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  KMSKeyforBucket:
    Type: AWS::KMS::Key
    Condition: CreateNewKMSKey
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action:
            - kms:*
          Resource: "*"

  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the S3 Source Bucket to capture files with Malware                                                                                             ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  S3MalwareProtectedBucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewBucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: !If
              - ScenarioNewBucketNoKMS
              - SSEAlgorithm: AES256
              - KMSMasterKeyID: !GetAtt KMSKeyforBucket.Arn
                SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the S3 Destination Bucket to copy files after Malware scanning                                                                                 ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  S3MalwareCleanBucket:
    Type: AWS::S3::Bucket
    Condition: ScenarioNewBucketCopyFunction
    DependsOn: S3MalwareProtectedBucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: !If
              - ScenarioNewBucketNoKMS
              - SSEAlgorithm: AES256
              - KMSMasterKeyID: !GetAtt KMSKeyforBucket.Arn
                SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  IAMLambdaS3CopyObjectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Condition: CreateCopyFunction
    Properties:
      Description: Policy for allowing Lambda to copy a tagged S3 Object
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowGetObjectSourceBucket
            Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectTagging"
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingSourceBucketName}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/*"
          - Sid: AllowPutObjectDestinationBucket
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:PutObjectTagging"
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingDestinationBucketName}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareCleanBucket}/*"
          - Sid: AllowLogs
            Effect: Allow
            Action:
              - "logs:CreateLogGroup"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: AllowLogStreams
            Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GuardDuty-S3-${ExistingSourceBucketName}:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GuardDuty-S3-${S3MalwareProtectedBucket}:*"
          - !If
            - ScenarioEncryption
            - Sid: AllowDecryptFromSourceBucket
              Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: !If
                - UseExistingKMSKey
                - !Sub "${ExistingKMSKeyArn}"
                - !Sub ${KMSKeyforBucket.Arn}
              Condition:
                StringLike:
                  kms:ViaService: s3.*.amazonaws.com
            - !Ref AWS::NoValue

  IAMLambdaS3CopyObjectRole:
    Type: AWS::IAM::Role
    Condition: CreateCopyFunction
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref IAMLambdaS3CopyObjectPolicy
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CopyTaggedS3ObjectLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: CreateCopyFunction
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import os
          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
                SOURCE_BUCKET=os.environ.get('SOURCE_BUCKET')
                DEST_BUCKET=os.environ.get('DEST_BUCKET')
                SOURCE_KEY=event['detail']['s3ObjectDetails']['objectKey']
                
                copy_source = {'Bucket': SOURCE_BUCKET, 'Key': SOURCE_KEY}
                try:
                    s3.meta.client.copy(copy_source, DEST_BUCKET, SOURCE_KEY)
                except Exception as e:
                    logger.error(f'Error copying object {SOURCE_KEY} from {SOURCE_BUCKET} to {DEST_BUCKET}: {e}')
                    raise e

      Role: !GetAtt IAMLambdaS3CopyObjectRole.Arn
      Environment:
        Variables:
          SOURCE_BUCKET: !If
            - UseExistingBucket
            - !Ref ExistingSourceBucketName
            - !Ref S3MalwareProtectedBucket
          DEST_BUCKET: !If
            - UseExistingBucket
            - !Ref ExistingDestinationBucketName
            - !Ref S3MalwareCleanBucket
      MemorySize: 128
      Timeout: 30

  GuardDutyCopyS3ObjectRule:
    Type: AWS::Events::Rule
    Condition: CreateCopyFunction
    Properties:
      Description: "GuardDuty Copy S3 Object Rule for source bucket"
      EventBusName: "default"
      State: "ENABLED"
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Malware Protection Object Scan Result
        detail:
          scanStatus:
            - COMPLETED
          resourceType:
            - S3_OBJECT
          s3ObjectDetails:
            bucketName:
              - !If
                - UseExistingBucket
                - !Ref ExistingSourceBucketName
                - !Ref S3MalwareProtectedBucket
          scanResultDetails:
            scanResultStatus:
              - !Ref CopyMethod
      Targets:
        - Id: "CopyTaggedS3ObjectLambdaFunction"
          Arn:
            Fn::GetAtt:
              - "CopyTaggedS3ObjectLambdaFunction"
              - "Arn"

  AccessEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Condition: CreateCopyFunction
    Properties:
      FunctionName: !Ref "CopyTaggedS3ObjectLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt GuardDutyCopyS3ObjectRule.Arn

  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the GuardDuty Malware resources                                                                                                                ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  IAMS3MalwareBucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    Properties:
      Description:
        Policy for allowing GuardDuty S3 malware protection to access the
        required services
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowManagedRuleToSendS3EventsToGuardDuty
            Effect: Allow
            Action:
              - events:PutRule
              - events:DeleteRule
              - events:PutTargets
              - events:RemoveTargets
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*
            Condition:
              StringLike:
                events:ManagedBy: malware-protection-plan.guardduty.amazonaws.com
          - Sid: AllowGuardDutyToMonitorEventBridgeManagedRule
            Effect: Allow
            Action:
              - events:DescribeRule
              - events:ListTargetsByRule
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*
          - Sid: AllowPostScanTag
            Effect: Allow
            Action:
              - S3:PutObjectTagging
              - S3:GetObjectTagging
              - S3:PutObjectVersionTagging
              - S3:GetObjectVersionTagging
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingSourceBucketName}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/*"
          - Sid: AllowEnableS3EventBridgeEvents
            Effect: Allow
            Action:
              - s3:PutBucketNotification
              - s3:GetBucketNotification
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingSourceBucketName}"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}"
          - Sid: AllowPutValidationObject
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingSourceBucketName}/malware-protection-resource-validation-object"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/malware-protection-resource-validation-object"
          - Sid: AllowCheckBucketOwnership
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingSourceBucketName}"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}"
          - Sid: AllowMalwareScan
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !If
              - UseExistingBucket
              - !Sub "arn:${AWS::Partition}:s3:::${ExistingSourceBucketName}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/*"
          - !If
            - ScenarioEncryption
            - Sid: AllowDecryptForMalwareScan
              Effect: Allow
              Action:
                - kms:GenerateDataKey
                - kms:Decrypt
              Resource: !If
                - UseExistingKMSKey
                - !Sub "${ExistingKMSKeyArn}"
                - !Sub ${KMSKeyforBucket.Arn}
              Condition:
                StringLike:
                  kms:ViaService: s3.*.amazonaws.com
            - !Ref AWS::NoValue

  IAMS3MalwareBucketRole:
    Type: AWS::IAM::Role
    DependsOn: IAMS3MalwareBucketPolicy
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: malware-protection-plan.guardduty.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref IAMS3MalwareBucketPolicy

  GuardDutyS3MalwareProtectionPlan:
    Type: AWS::GuardDuty::MalwareProtectionPlan
    DependsOn: IAMS3MalwareBucketRole
    Properties:
      Actions:
        Tagging:
          Status: ENABLED
      ProtectedResource:
        S3Bucket:
          BucketName: !If
            - UseExistingBucket
            - !Ref ExistingSourceBucketName
            - !Ref S3MalwareProtectedBucket
      Role: !GetAtt IAMS3MalwareBucketRole.Arn

Outputs:
  GuardDutyS3MalwareProtectionPlanArn:
    Description: Amazon Resource Name (ARN) associated with this Malware Protection plan
    Value: !GetAtt GuardDutyS3MalwareProtectionPlan.Arn

  GuardDutyS3MalwareProtectionPlanId:
    Description: A unique identifier associated with Malware Protection plan
    Value: !GetAtt GuardDutyS3MalwareProtectionPlan.MalwareProtectionPlanId

  S3MalwareProtectionRole:
    Description: IAM role created for S3 Malware Protection
    Value: !Ref IAMS3MalwareBucketRole

  SourceBucketArn:
    Condition: CreateNewBucket
    Description:
      The bucket arn which has been created and enabled for S3 Malware
      protection
    Value: !GetAtt S3MalwareProtectedBucket.Arn
