# ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ GuardDuty S3 Malware Protection Blog Post Solution - CloudFormation Template                                                                             ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for creating the IAM PassRole and Policy
  for GuardDuty Malware Protection for S3
Metadata:
  Version: v.1.0.2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Scenario
        Parameters:
          - NewExistingS3Bucket
          - CreateBucketKMSKey
          - CopyToCleanBucket
      - Label:
          default: BYO Buckets
        Parameters:
          - ExistingSourceBucketArn
          - ExistingDestintionBucketArn
      - Label:
          default: Encryption Configuration
        Parameters:
          - BucketKMSKey
          - ExistingKMSKeyArn
      - Label:
          default: Copy Function
        Parameters:
          - CopyMethod

    ParameterLabels:
      NewExistingS3Bucket:
        default: Create a new bucket or use an existing bucket
      BucketKMSKey:
        default: Is the existing bucket using a KMS key?
      CreateBucketKMSKey:
        default: If "NEW", Should a KMS key be created for the new bucket?
      IAMS3MalwareBucketName:
        default: IAM role name to be created/used for S3 Malware Protection
      CopyToCleanBucket:
        default: Copy function to clean bucket
      CopyMethod:
        default: Copy files with "THREATS" or "NO_THREATS"
      ExistingSourceBucketArn:
        default: ARN of the existing source bucket
      ExistingDestintionBucketArn:
        default: ARN of the existing destination bucket
      ExistingKMSKeyArn:
        default: ARN of the existing KMS key to be used

# ╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ CloudFormation Template Parameters                                                                                                          ║
# ╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
Parameters:
  NewExistingS3Bucket:
    Description: Should a new S3 bucket be created or use an existing bucket
    Default: new
    Type: String
    AllowedValues:
      - new
      - existing
    ConstraintDescription: You must specify new or existing.

  CopyToCleanBucket:
    Description: Should a new S3 bucket be created and copy function
    Default: no
    Type: String
    AllowedValues:
      - yes
      - no
    ConstraintDescription: You must specify yes or no.

  CopyMethod:
    Description: Copy files with scanned value of "THREATS" or "NO_THREATS"
    Default: NO_THREATS_FOUND
    Type: String
    AllowedValues:
      - THREATS
      - NO_THREATS_FOUND

  BucketKMSKey:
    Description: Is the existing S3 bucket encrypted with an existing KMS key?
    Default: no
    Type: String
    AllowedValues:
      - yes
      - no
    ConstraintDescription: You must specify yes or no.

  CreateBucketKMSKey:
    Description: Should a KMS key be created for the new S3 bucket
    Default: yes
    Type: String
    AllowedValues:
      - yes
      - no
    ConstraintDescription: You must specify yes or no.

  ExistingSourceBucketArn:
    Description: ARN of the existing source bucket
    Type: String
    AllowedPattern: "^(arn:aws:s3:::([^/]+))?$"

  ExistingDestintionBucketArn:
    Description: ARN of the existing destination bucket
    Type: String
    AllowedPattern: "^(arn:aws:s3:::([^/]+))?$"

  ExistingKMSKeyArn:
    Description: ARN of the existing KMS key to be used
    Type: String
    AllowedPattern: "^(arn:aws:kms:[a-z0-9-]+:[0-9]+:key/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$"

Conditions:
  CreateNewKMSKey: !Equals
    - !Ref CreateBucketKMSKey
    - yes

  UseExistingKMSKey: !Equals
    - !Ref CreateBucketKMSKey
    - "no"

  CreateNewBucket: !Equals
    - !Ref NewExistingS3Bucket
    - new

  UseExistingBucket: !Equals
    - !Ref NewExistingS3Bucket
    - existing

  CreateCopyFunction: !Equals
    - !Ref CopyToCleanBucket
    - yes

  # ScenarioNewBucketNoKMS: !And
  #   - !Condition CreateNewBucket
  #   - !Condition NoKMSKey

  # ScenarioCreateNewBucketKMSKey: !And
  #   - !Condition CreateNewBucket
  #   - !Condition CreateNewKMSKey

  # ScenarioCopyFunctionNoKms: !And
  #   - !Condition CreateCopyFunction
  #   - !Condition NoKMSKey

  # ScenarioCopyFunctionKMSKey: !And
  #   - !Condition CreateCopyFunction
  #   - !Condition CreateNewKMSKey

# ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║ GuardDuty S3 Malware Scanning - CloudFormation Template Resources                                                                                     ║
# ╠═══════════════════════════════════════════╤════════════════════════════════════════╤══════════════════════════════════════════════════════════════════╣
# ║ S3MalwareProtectedBucket                  │ AWS::S3::Bucket                        │ New S3 bucket for malware scanning                               ║
# ║ IAMS3MalwareBucketPolicy                  │ AWS::IAM::ManagedPolicy                │ IAM managed policy for S3 malware scanning                       ║
# ║ IAMS3MalwareBucketRole                    │ AWS::IAM::Role                         │ IAM role using the managed policy for S3 malware scanning        ║
# ║ GuardDutyS3MalwareProtectionPlan          │ AWS::GuardDuty::MalwareProtectionPlan  │ GuardDuty S3 malware protection resource for the S3 bucket       ║
# ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝
Resources:
  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the Encryption Resources                                                                                                                       ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  KMSKeyforBucket:
    Type: AWS::KMS::Key
    Condition: CreateNewKMSKey
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":iam::"
                  - Ref: AWS::AccountId
                  - :root
          Action:
            - kms:*
          Resource: "*"

  # KMSKeyAlias:
  #   Type: AWS::KMS::Alias
  #   Properties:
  #     AliasName: !Sub alias/S3Bucket-kmskey-${S3MalwareProtectedBucket}
  #     TargetKeyId: !Ref KMSKeyforBucket

  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the S3 Source Bucket to capture files with Malware                                                                                             ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  S3MalwareProtectedBucket:
    Type: AWS::S3::Bucket
    Condition: CreateNewBucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      #BucketName: !Ref S3MalwareProtectedBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt
                - KMSKeyforBucket
                - Arn
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the S3 Destination Bucket to copy files after Malware scanning                                                                                 ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  S3MalwareCleanBucket:
    Type: AWS::S3::Bucket
    # To do - this is a multi condition eq CreateNewBucket && CreateCopyFunction
    Condition: CreateCopyFunction # update
    DependsOn: S3MalwareProtectedBucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      # BucketName: !Ref S3MalwareProtectedBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt
                - KMSKeyforBucket
                - Arn
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  IAMLambdaS3CopyObjectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Condition: CreateCopyFunction
    DependsOn: S3MalwareCleanBucket
    Properties:
      Description: Policy for allowing Lambda to copy a tagged S3 Object
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowGetObjectSourceBucket
            Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectTagging"
            Resource:
              # TODO IF statement for BYOB
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareCleanBucket}/*"
          - Sid: AllowPutObjectDestinationBucket
            Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:PutObjectTagging"
            Resource:
              # TODO IF statement for BYOB
              - !Sub "arn:${AWS::Partition}:s3:::${S3MalwareCleanBucket}/*"
          - Sid: AllowLogs
            Effect: Allow
            Action:
              - "logs:CreateLogGroup"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: AllowLogStreams
            Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/GuardDuty-S3-${S3MalwareProtectedBucket}:*"

  IAMLambdaS3CopyObjectRole:
    Type: AWS::IAM::Role
    Condition: CreateCopyFunction
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref IAMLambdaS3CopyObjectPolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CopyTaggedS3ObjectLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: CreateCopyFunction
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Code:
        ZipFile: |
          import os
          import boto3

          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
                SOURCE_BUCKET=os.environ.get('SOURCE_BUCKET')
                DEST_BUCKET=os.environ.get('DEST_BUCKET')
                SOURCE_KEY=event['detail']['s3ObjectDetails']['objectKey']
                
                copy_source = {'Bucket': SOURCE_BUCKET, 'Key': SOURCE_KEY}
                s3.meta.client.copy(copy_source, DEST_BUCKET, SOURCE_KEY)

      Role: !GetAtt IAMLambdaS3CopyObjectRole.Arn
      Environment:
        Variables:
          # TODO IF statement for BYOB
          SOURCE_BUCKET: !Ref S3MalwareProtectedBucket
          DEST_BUCKET: !Ref S3MalwareCleanBucket
      MemorySize: 128
      Timeout: 30

  GuardDutyCopyS3ObjectRule:
    Type: AWS::Events::Rule
    Condition: CreateCopyFunction
    Properties:
      Description: !Sub "GuardDuty Copy S3 Object Rule for source bucket ${S3MalwareProtectedBucket}"
      EventBusName: "default"
      # Name: !Sub "S3Malware-CopyS3Object"
      State: "ENABLED"
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Malware Protection Object Scan Result
        detail:
          scanStatus:
            - COMPLETED
          resourceType:
            - S3_OBJECT
          bucket:
            # TODO Check if this is fixed.
            name:
              - !Ref S3MalwareProtectedBucket
          scanResultDetails:
            scanResultStatus:
              - !Ref CopyMethod
      Targets:
        - Id: "CopyTaggedS3ObjectLambdaFunction"
          Arn:
            Fn::GetAtt:
              - "CopyTaggedS3ObjectLambdaFunction"
              - "Arn"

  AccessEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Condition: CreateCopyFunction
    Properties:
      FunctionName: !Ref "CopyTaggedS3ObjectLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "GuardDutyCopyS3ObjectRule"
          - "Arn"
  # ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ Create the GuardDuty Malware resources                                                                                                                ║
  # ╚═══════════════════════════════════════════╧════════════════════════════════════════╧══════════════════════════════════════════════════════════════════╝

  IAMS3MalwareBucketPolicy:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: Delete
    # TODO have to check the build without this dependson for BYOB
    #DependsOn: S3MalwareProtectedBucket
    Properties:
      Description:
        Policy for allowing GuardDuty S3 malware protection to access the
        required services
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowManagedRuleToSendS3EventsToGuardDuty
            Effect: Allow
            Action:
              - events:PutRule
              - events:DeleteRule
              - events:PutTargets
              - events:RemoveTargets
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*
            Condition:
              StringLike:
                events:ManagedBy: malware-protection-plan.guardduty.amazonaws.com
          - Sid: AllowGuardDutyToMonitorEventBridgeManagedRule
            Effect: Allow
            Action:
              - events:DescribeRule
              - events:ListTargetsByRule
            Resource:
              - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*
          - Sid: AllowPostScanTag
            Effect: Allow
            Action:
              - S3:PutObjectTagging
              - S3:GetObjectTagging
              - S3:PutObjectVersionTagging
              - S3:GetObjectVersionTagging
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/*
          - Sid: AllowEnableS3EventBridgeEvents
            Effect: Allow
            Action:
              - s3:PutBucketNotification
              - s3:GetBucketNotification
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}
          - Sid: AllowPutValidationObject
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/malware-protection-resource-validation-object
          - Sid: AllowCheckBucketOwnership
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}
          - Sid: AllowMalwareScan
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3MalwareProtectedBucket}/*
          - Sid: AllowDecryptForMalwareScan
            Effect: Allow
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource:
              - !Sub ${KMSKeyforBucket.Arn}
            Condition:
              StringLike:
                kms:ViaService: s3.*.amazonaws.com

  IAMS3MalwareBucketRole:
    Type: AWS::IAM::Role
    DependsOn: IAMS3MalwareBucketPolicy
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: malware-protection-plan.guardduty.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - !Ref IAMS3MalwareBucketPolicy

  GuardDutyS3MalwareProtectionPlan:
    Type: AWS::GuardDuty::MalwareProtectionPlan
    DependsOn: IAMS3MalwareBucketRole
    Properties:
      Actions:
        Tagging:
          Status: ENABLED
      ProtectedResource:
        S3Bucket:
          # TODO IF statement for BYOB
          BucketName: !Ref S3MalwareProtectedBucket
      Role: !GetAtt IAMS3MalwareBucketRole.Arn

# ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗

# S3MalwareProtectedBucket:
#   Type: AWS::S3::Bucket
#   Condition: ScenarioNewBucketNoKMS
#   DeletionPolicy: Delete
#   UpdateReplacePolicy: Delete
#   Properties:
#     #BucketName: !Ref S3MalwareProtectedBucketName
#     PublicAccessBlockConfiguration:
#       BlockPublicAcls: true
#       BlockPublicPolicy: true
#       IgnorePublicAcls: true
#       RestrictPublicBuckets: true

# GuardDutyS3MalwareProtectionPlanNoKMS:
#   Type: AWS::GuardDuty::MalwareProtectionPlan
#   DependsOn: S3MalwareProtectedBucket
#   Condition: ScenarioNewBucketNoKMS
#   Properties:
#     Actions:
#       Tagging:
#         Status: ENABLED
#     ProtectedResource:
#       S3Bucket:
#         BucketName: !Ref S3MalwareProtectedBucketName
#     Role: !GetAtt IAMS3MalwareBucketRole.Arn

# S3MalwareCleanBucket:
#   Type: AWS::S3::Bucket
#   Condition: ScenarioCopyFunctionNoKms
#   DeletionPolicy: Delete
#   UpdateReplacePolicy: Delete
#   Properties:
#     BucketName: !Ref S3MalwareProtectedBucketName
#     PublicAccessBlockConfiguration:
#       BlockPublicAcls: true
#       BlockPublicPolicy: true
#       IgnorePublicAcls: true
#       RestrictPublicBuckets: true

Outputs:
  GuardDutyS3MalwareProtectionPlanArn:
    Description: Amazon Resource Name (ARN) associated with this Malware Protection plan
    Value: !GetAtt GuardDutyS3MalwareProtectionPlan.Arn

  GuardDutyS3MalwareProtectionPlanId:
    Description: A unique identifier associated with Malware Protection plan
    Value: !GetAtt GuardDutyS3MalwareProtectionPlan.MalwareProtectionPlanId

  S3MalwareProtectionRole:
    Description: IAM role created for S3 Malware Protection
    Value: !Ref IAMS3MalwareBucketRole

  # TODO IF statement for BYOB
  SourceBucketName:
    Description:
      The bucket name which has been created and enabled for S3 Malware
      protection
    Value: !Ref S3MalwareProtectedBucket

  # TODO IF statement for BYOB
  SourceBucketArn:
    Description:
      The bucket arn which has been created and enabled for S3 Malware
      protection
    Value: !GetAtt S3MalwareProtectedBucket.Arn
