import * as cdk from "aws-cdk-lib";
import { Construct, IDependable } from "constructs";
import * as iam from "aws-cdk-lib/aws-iam";
import { s3SourceStack } from "./s3_source_stack";
import { s3CopyStack } from "./s3_destination_stack";
import * as guardduty from "aws-cdk-lib/aws-guardduty";
import * as custom_resources from "aws-cdk-lib/custom-resources";
import { NagSuppressions } from "cdk-nag";

interface GuardDutyS3StackProps extends cdk.StackProps {
  delayProvider: custom_resources.Provider;
}
export class GuardDutyS3Stack extends cdk.Stack {
  public readonly s3Stack: s3SourceStack;
  constructor(scope: Construct, id: string, props: GuardDutyS3StackProps) {
    super(scope, id, props);

    const { delayProvider } = props;

    const app = this.node.root as cdk.App;
    const S3MalwareProtectedBucketStack = new s3SourceStack(
      app,
      "S3MalwareProtectedBucket"
    );

    interface S3CopyStackProps extends cdk.StackProps {
      bucketName: string;
      bucketArn: string;
      dependsOn: IDependable[];
    }

    const s3CopyStackProps: S3CopyStackProps = {
      bucketName: `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketName}`,
      bucketArn: `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}`,
      dependsOn: [S3MalwareProtectedBucketStack],
    };

    const S3MalwareCleanBucketStack = new s3CopyStack(
      app,
      "S3MalwareCleanBucket",
      s3CopyStackProps
    );

    const rolePolicy = new iam.Policy(
      this,
      "GuardDutyMalwareProtectionRolePolicy",
      {
        policyName: "GuardDutyMalwareProtectionRolePolicy",
        statements: [
          new iam.PolicyStatement({
            sid: "AllowManagedRuleToSendS3EventsToGuardDuty",
            effect: iam.Effect.ALLOW,
            actions: [
              "events:PutRule",
              "events:DeleteRule",
              "events:PutTargets",
              "events:RemoveTargets",
            ],
            resources: [
              `arn:aws:events:${this.region}:${this.account}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*`,
            ],
            conditions: {
              StringLike: {
                "events:ManagedBy":
                  "malware-protection-plan.guardduty.amazonaws.com",
              },
            },
          }),
          new iam.PolicyStatement({
            sid: "AllowGuardDutyToMonitorEventBridgeManagedRule",
            effect: iam.Effect.ALLOW,
            actions: ["events:DescribeRule", "events:ListTargetsByRule"],
            resources: [
              `arn:aws:events:${this.region}:${this.account}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*`,
            ],
          }),
          new iam.PolicyStatement({
            sid: "AllowPostScanTag",
            effect: iam.Effect.ALLOW,
            actions: [
              "s3:PutObjectTagging",
              "s3:GetObjectTagging",
              "s3:PutObjectVersionTagging",
              "s3:GetObjectVersionTagging",
            ],
            resources: [
              `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}/*`,
            ],
          }),
          new iam.PolicyStatement({
            sid: "AllowEnableS3EventBridgeEvents",
            effect: iam.Effect.ALLOW,
            actions: ["s3:PutBucketNotification", "s3:GetBucketNotification"],
            resources: [
              `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}`,
            ],
          }),
          new iam.PolicyStatement({
            sid: "AllowPutValidationObject",
            effect: iam.Effect.ALLOW,
            actions: ["s3:PutObject"],
            resources: [
              `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}/malware-protection-resource-validation-object`,
            ],
          }),
          new iam.PolicyStatement({
            sid: "AllowCheckBucketOwnership",
            effect: iam.Effect.ALLOW,
            actions: ["s3:ListBucket", "s3:GetBucketLocation"],
            resources: [
              `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}`,
            ],
          }),
          new iam.PolicyStatement({
            sid: "AllowMalwareScan",
            effect: iam.Effect.ALLOW,
            actions: ["s3:GetObject", "s3:GetObjectVersion"],
            resources: [
              `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}/*`,
            ],
          }),
          new iam.PolicyStatement({
            sid: "AllowDecryptForMalwareScan",
            effect: iam.Effect.ALLOW,
            actions: ["kms:GenerateDataKey", "kms:Decrypt"],
            resources: [
              `${S3MalwareProtectedBucketStack.kmsEncryptionKey.keyArn}`,
            ],
            conditions: {
              StringLike: {
                "kms:ViaService": "s3.*.amazonaws.com",
              },
            },
          }),
        ],
      }
    );

    NagSuppressions.addResourceSuppressions(rolePolicy, [
      {
        id: "AwsSolutions-IAM5",
        reason:
          "Suppress all AwsSolutions-IAM5 findings on Role. Have validated that this is correct defaults",
      },
    ]);

    const guardDutyPassRole = new iam.Role(
      this,
      "GuardDutyMalwareProtectionPassRole",
      {
        roleName: `GuardDutyMalwareProtectionPassRole-${this.account}`,
        assumedBy: new iam.ServicePrincipal(
          "malware-protection-plan.guardduty.amazonaws.com"
        ),
        description:
          "An iam pass role for guardduty malware protection service to assume",
      }
    );

    rolePolicy.attachToRole(guardDutyPassRole);

    // Create the delay custom resource
    const delayResource = new cdk.CustomResource(this, "DelayResource", {
      serviceToken: delayProvider.serviceToken,
    });

    // Make the custom resource depends on the IAM resource
    delayResource.node.addDependency(guardDutyPassRole);

    const CfnMalwareProtectionPlan = new guardduty.CfnMalwareProtectionPlan(
      this,
      "GuardDutyS3MalwareProtectionPlan",
      {
        protectedResource: {
          s3Bucket: {
            bucketName: `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketName}`,
            //objectPrefixes: ["*"]
          },
        },
        role: `${guardDutyPassRole.roleArn}`,
        actions: {
          tagging: {
            status: "ENABLED",
          },
        },
      }
    );

    // Sometimes encountering a race condition where the AWS CloudFormation stack is attempting to create the CfnMalwareProtectionPlan
    // resource before the guardDutyPassRole IAM role has been fully created and propagated across AWS services
    // Make the GuardDuty Malware Protection Plan depend on the delay resource
    CfnMalwareProtectionPlan.node.addDependency(delayResource);

    // Add the CfnOutput for the resources
    new cdk.CfnOutput(this, "CatalogDataS3BucketArn", {
      value: `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketArn}`,
      description: "The ARN of the S3 bucket for the data catalog.",
      exportName: "CatalogDataS3BucketArn",
    });
    new cdk.CfnOutput(this, "CatalogDataS3BucketName", {
      value: `${S3MalwareProtectedBucketStack.catalogDataS3Bucket.bucketName}`,
      description: "The ARN of the S3 bucket for the data catalog.",
      exportName: "CatalogDataS3BucketName",
    });
    new cdk.CfnOutput(this, "CatalogDataS3BucketKmsEncryptionKeyArn", {
      value: `${S3MalwareProtectedBucketStack.kmsEncryptionKey.keyArn}`,
      description: "The ARN of the S3 bucket for the data catalog.",
      exportName: "CatalogDataS3BucketKmsEncryptionKeyArn",
    });
    new cdk.CfnOutput(this, "RoleArn", {
      value: guardDutyPassRole.roleArn,
      description: "The ARN of the IAM Role for GuardDuty Service Role.",
      exportName: "GuardDutyRoleArn",
    });
    new cdk.CfnOutput(this, "MalwareProtectionPlanId", {
      value: CfnMalwareProtectionPlan.logicalId,
      description: "The ID of the GuardDuty Protection Plan.",
      exportName: "GuardDutyProtectionPlanId",
    });
    new cdk.CfnOutput(this, "MalwareProtectionPlanArn", {
      value: CfnMalwareProtectionPlan.attrArn,
      description: "The ARN of the GuardDuty Protection Plan.",
      exportName: "GuardDutyProtectionPlanArn",
    });
    if (S3MalwareCleanBucketStack) {
      new cdk.CfnOutput(this, "CleanBucketName", {
        value: `${S3MalwareCleanBucketStack.cleanS3Bucket.bucketName}`,
        description: "The name of the clean S3 bucket.",
        exportName: "CleanBucketName",
      });
    }
  }
}
