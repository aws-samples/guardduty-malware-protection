import * as cdk from "aws-cdk-lib";
import { Construct } from "constructs";
import * as lambda from "aws-cdk-lib/aws-lambda";
import * as custom_resources from "aws-cdk-lib/custom-resources";
import { NagSuppressions } from "cdk-nag";
interface LambdaDelayStackProps extends cdk.StackProps {
  delayTime: number; // Delay time in seconds
}

export class LambdaDelayStack extends cdk.Stack {
  public readonly delayProvider: custom_resources.Provider;

  constructor(scope: Construct, id: string, props: LambdaDelayStackProps) {
    super(scope, id, props);

    // const delayTime = props.delayTime;
    const { delayTime } = props;

    // Create the Lambda function for introducing delay
    const delayFunction = new lambda.Function(this, "DelayFunction", {
      runtime: lambda.Runtime.PYTHON_3_12,
      handler: "index.lambda_handler",
      timeout: cdk.Duration.seconds(300),
      code: lambda.Code.fromInline(`
import json
import time
import os

def lambda_handler(event, context):
    # Get delay time from environment variable
    delay_time = int(os.environ.get('DELAY_TIME', '60'))
    # Introduce a delay
    time.sleep(delay_time)
    
    return {
        'statusCode': 200,
        'body': json.dumps(f'Waited for {delay_time} seconds')
    }
      `),
      environment: {
        DELAY_TIME: delayTime.toString(),
      },
    });

    // Create the custom resource provider
    this.delayProvider = new custom_resources.Provider(this, "DelayProvider", {
      onEventHandler: delayFunction,
    });

    NagSuppressions.addResourceSuppressions(
      this.delayProvider,
      [
        {
          id: "AwsSolutions-L1",
          reason:
            "This is a custom resource provider that requires intrinsic functions.",
        },
        {
          id: "CdkNagValidationFailure",
          reason:
            "Suppressing the validation failure warning for this resource. As adding 'AwsSolutions-L1' above doesn't remove the warning from synth ",
        },
        {
          id: "AwsSolutions-IAM4",
          reason: "This provider uses a default policy to access the provider.",
        },
        {
          id: "AwsSolutions-IAM5",
          reason: "This provider uses a default policy to access the provider.",
        },
      ],
      true
    );
    NagSuppressions.addResourceSuppressions(
      delayFunction,
      [
        {
          id: "AwsSolutions-IAM4",
          reason: "This function uses a default policy to access the provider.",
        },
      ],
      true
    );
  }
}
