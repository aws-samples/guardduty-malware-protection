import * as cdk from "aws-cdk-lib";
import { PhysicalName } from "aws-cdk-lib";
import * as s3 from "aws-cdk-lib/aws-s3";
import * as kms from "aws-cdk-lib/aws-kms";
import * as logs from "aws-cdk-lib/aws-logs";

export class s3SourceStack extends cdk.Stack {
  public readonly catalogDataS3Bucket: s3.Bucket;
  public readonly kmsEncryptionKey: kms.Key;
  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Create a new KMS key for encrypting the S3 bucket
    this.kmsEncryptionKey = new kms.Key(this, "catalogDataBucketKey", {
      enableKeyRotation: true,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
    });

    // Create a log bucket for storing access logs
    const catalogLogS3Bucket = new s3.Bucket(this, "catalogLogS3Bucket", {
      bucketName: PhysicalName.GENERATE_IF_NEEDED, // Replace with your desired log bucket name
      enforceSSL: true, // Force SSL for data transfer
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL, // Block all public access
      removalPolicy: cdk.RemovalPolicy.DESTROY,
    });

    // Create a log group for storing access logs
    const catalogLogGroup = new logs.LogGroup(this, "catalogLogGroup", {
      logGroupName: PhysicalName.GENERATE_IF_NEEDED, // Replace with your desired log group name
      removalPolicy: cdk.RemovalPolicy.DESTROY,
    });

    // Create a new S3 bucket
    this.catalogDataS3Bucket = new s3.Bucket(this, "catalogDataS3Bucket", {
      bucketName: PhysicalName.GENERATE_IF_NEEDED, //`catalog-data-${this.account}`
      encryption: s3.BucketEncryption.KMS, // Server-side encryption with KMS keys
      encryptionKey: this.kmsEncryptionKey, // Use the KMS key for encryption
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL, // Block all public access
      enforceSSL: true, // Force SSL for data transfer
      serverAccessLogsBucket: catalogLogS3Bucket, // Enable access logging to the log bucket
      serverAccessLogsPrefix: "s3", // Prefix for access logs
      removalPolicy: cdk.RemovalPolicy.DESTROY, // Destroy the bucket on stack deletion
    });

    return this;
  }
}
